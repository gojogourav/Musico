// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UploadedTrack {
  id              String   @id @default(cuid())
  title           String
  artistName      String
  albumName       String?
  durationSeconds Int // Corrected from durationSecongs
  fileUrl         String   @unique
  createdAt       DateTime @default(now())

  user      User            @relation(fields: [userId], references: [id])
  userId    String
  playlists PlaylistTrack[]
  likedBy   LikedSong[]
}

model User {
  id             String          @id @default(cuid())
  name           String
  username       String          @unique
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  playlists      Playlist[]
  likedSongs     LikedSong[]
  uploadedTracks UploadedTrack[]
}

model Playlist {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tracks PlaylistTrack[]
}

model LikedSong {
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  track           UploadedTrack @relation(fields: [uploadedTrackId], references: [id])
  uploadedTrackId String // Corrected from trackYoutubeId
  likedAt         DateTime      @default(now())

  @@id([userId, uploadedTrackId]) // Corrected from trackYoutubeId
}

model PlaylistTrack {
  playlist        Playlist      @relation(fields: [playlistId], references: [id])
  playlistId      String
  track           UploadedTrack @relation(fields: [uploadedTrackId], references: [id])
  uploadedTrackId String // Corrected from trackYoutubeId
  addedAt         DateTime      @default(now())

  @@id([playlistId, uploadedTrackId]) // Corrected from trackYoutubeId
}
